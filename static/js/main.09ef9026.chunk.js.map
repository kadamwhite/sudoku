{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["getRange","index","getColumn","rows","ci","map","row","getSquare","ri","rowRange","colRange","square","rowIdx","colIdx","push","storedLayout","localStorage","getItem","defaultLayout","JSON","parse","isOriginal","canCellBe","guess","getRow","computePossibilities","options","optionUniqueInSet","cell","neighbors","option","neighbor","value","possibilities","includes","Cell","original","onClick","classNames","filter","Boolean","join","type","className","ValidationCell","set","i","length","complete","isValid","sort","valid","random","arr","Math","floor","clone","subArr","App","useState","setRows","showGuessButton","outOfOptions","beforeGuess","saveSnapshot","updateCell","useCallback","setTimeout","newRows","cells","computeCells","useEffect","cellSpacing","key","window","prompt","_","isComplete","reduce","forEach","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.09ef9026.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport './App.css';\n\nfunction getRange( index ) {\n  if ( index < 3 ) {\n    return [0, 1, 2];\n  }\n  if ( index < 6 ) {\n    return [3, 4, 5];\n  }\n  return [6, 7, 8];\n}\n\nfunction getRow( rows, ri ) {\n  return rows[ ri ];\n}\n\nfunction getColumn( rows, ci ) {\n  return rows.map( row => row[ ci ] );\n}\n\nfunction getSquare( rows, ri, ci ) {\n  let rowRange = getRange( ri );\n  let colRange = getRange( ci );\n  const square = [];\n  for ( let rowIdx of rowRange ) {\n    for ( let colIdx of colRange ) {\n      square.push( rows[ rowIdx ][ colIdx ] );\n    }\n  }\n  return square;\n}\n\nconst _ = null;\n// Permit injecting a layout via localStorage\nlet storedLayout = localStorage.getItem( 'layout' );\nstoredLayout = storedLayout ? JSON.parse( storedLayout ) : null;\nconst defaultLayout = storedLayout || [\n  [1, _, _, _, _, _, _, _, _ ],\n  [_, _, _, 1, _, 6, 8, _, 2 ],\n  [_, _, 8, 9, _, _, 6, _, _ ],\n  [4, _, _, 7, 6, _, _, 3, _ ],\n  [_, 7, _, _, _, 4, _, 2, _ ],\n  [_, 6, _, _, 1, 8, _, _, 7 ],\n  [_, _, 1, _, _, 9, 2, _, _ ],\n  [2, _, 5, 6, _, 7, _, _, _ ],\n  [_, _, _, _, _, _, _, _, 5 ],\n];\n\nfunction isOriginal( rows, ri, ci ) {\n  return rows[ ri ][ ci ] === defaultLayout[ ri ][ ci ];\n}\n\nfunction canCellBe( rows, ri, ci, guess ) {\n  if ( rows[ ri ][ ci ] === guess ) {\n    return true;\n  }\n  for ( let num of getRow( rows, ri ) ) {\n    if ( num === guess ) return false;\n  }\n  for ( let num of getColumn( rows, ci ) ) {\n    if ( num === guess ) return false;\n  }\n  for ( let num of getSquare( rows, ri, ci ) ) {\n    if ( num === guess ) return false;\n  }\n  return true;\n}\n\n/**\n * Build list of possible values for a cell.\n *\n * @param {Array}  rows The array of cells.\n * @param {Number} ri   The index of the row.\n * @param {Number} ci   The index of the column.\n *\n * @returns {Array} The possible values for the specified cell.\n */\nfunction computePossibilities( rows, ri, ci ) {\n  const options = [];\n  for ( let guess = 1; guess < 10; guess++ ) {\n    if ( canCellBe( rows, ri, ci, guess ) ) {\n      options.push( guess );\n    }\n  }\n  return options;\n}\n\n/**\n * Compute the possibilities and values for the grid of cells.\n *\n * @param {Array} rows The array of cells.\n *\n * @return {Array} Computed cell data.\n */\nfunction computeCells( rows ) {\n  return rows.map( ( row, ri ) => row.map( ( cell, ci ) => {\n    if ( cell ) {\n      return {\n        value: cell,\n        possibilities: null,\n        original: isOriginal( rows, ri, ci ),\n      };\n    }\n    return {\n      value: null,\n      possibilities: computePossibilities( rows, ri, ci ),\n      original: false,\n    };\n  } ) );\n}\n\nfunction complete( set ) {\n  for ( let i = 0; i < set.length; i++ ) {\n    if ( ! set[ i ] || ! set[ i ].value ) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst valid = set => (\n  set.map( cell => `${ cell.value }` ).sort().join( '' ) === '123456789'\n);\n\nfunction optionUniqueInSet( cell, neighbors, option ) {\n  for ( let neighbor of neighbors ) {\n    if ( neighbor === cell || neighbor.value === option || ! neighbor.possibilities ) {\n      continue;\n    }\n    if ( neighbor.possibilities.includes( option ) ) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst Cell = ( { value, original, possibilities, onClick } ) => {\n  const classNames = [\n    original ? 'original' : '',\n    possibilities ? 'guess' : '',\n  ].filter( Boolean ).join( ' ' );\n  return (\n    <button type=\"button\" onClick={ onClick }>\n      <span className={ classNames }>\n        { value || possibilities.join( ', ' ) }\n      </span>\n    </button>\n  );\n};\n\nconst ValidationCell = ( { set } ) => {\n  if ( ! complete( set ) ) {\n    return (\n      <td className=\"validation\" />\n    );\n  }\n  const isValid = valid( set );\n  return (\n    <td className={ `validation ${ isValid ? 'valid' : 'invalid' }` }>\n      { isValid ? '\\u2713' : '\\u2A2F' }\n    </td>\n  );\n}\n\nfunction isComplete( rows ) {\n  for ( let row of rows ) {\n    for ( let cell of row ) {\n      if ( cell === null || cell.value === null ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction random( arr ) {\n  const idx = Math.floor( Math.random() * arr.length );\n  return arr[ idx ];\n}\n\nconst clone = arr => arr.map( subArr => [ ...subArr ] );\n\nfunction App() {\n  const [ rows, setRows ] = useState( clone( defaultLayout ) );\n  const [ showGuessButton, outOfOptions ] = useState( false );\n  const [ beforeGuess, saveSnapshot ] = useState( null );\n\n  const updateCell = useCallback( ( ri, ci, value ) => {\n    setTimeout( () => {\n      const newRows = [ ...rows ];\n      newRows[ ri ][ ci ] = +value;\n      setRows( newRows );\n    }, 50 );\n  }, [ rows, setRows ] );\n\n  const cells = computeCells( rows );\n\n  useEffect( () => {\n    for ( let ri = 0; ri < 9; ri++ ) {\n      for ( let ci = 0; ci < 9; ci++ ) {\n        const cell = cells[ ri ][ ci ];\n        if ( cell.value || ! cell.possibilities ) {\n          continue;\n        }\n\n        if ( cell.possibilities.length === 1 ) {\n          updateCell( ri, ci, cell.possibilities[ 0 ] );\n          return;\n        }\n\n        // No easy out; exhaustively check each possibility.\n        for ( let option of cell.possibilities ) {\n          if ( optionUniqueInSet( cell, getSquare( cells, ri, ci ), option ) ) {\n            updateCell( ri, ci, option );\n            return;\n          }\n        }\n      }\n    }\n    outOfOptions(true);\n  }, [ cells, updateCell ] );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <table cellSpacing={0}>\n          <tbody>\n            {cells.map(( row, ri ) => (\n              <tr key={ ri }>\n                {row.map(( cell, ci ) => (\n                  <td key={ `${ ri }${ ci }` }>\n                    <Cell\n                      { ...cell }\n                      onClick={ () => {\n                        const guess = window.prompt( 'Guess?' );\n                        updateCell( ri, ci, guess );\n                      } }\n                    />\n                  </td>\n                ))}\n                <ValidationCell set={ row } />\n              </tr>\n            ))}\n            <tr>\n              { rows[0].map( ( _, ci ) => (\n                <ValidationCell set={ getColumn( cells, ci ) } key={ `col${ ci }valid` } />\n              ) ) }\n            </tr>\n          </tbody>\n        </table>\n        { beforeGuess ? ( \n          <button type=\"button\" onClick={ () => {\n            // If we get to this again, we've failed; reset!\n            setRows( beforeGuess );\n            saveSnapshot( null );\n          } }>Reset</button>\n         ) : (\n          ! isComplete( cells ) && showGuessButton ? (\n            <button type=\"button\" onClick={ () => {\n              const unknownCells = cells.reduce( ( options, row, ri ) => {\n                row.forEach( ( cell, ci ) => {\n                  if ( cell.value ) {\n                    return;\n                  }\n                  options.push( [ cell, ri, ci ] );\n                } );\n                return options;\n              }, [] );\n              const [ cell, ri, ci ] = random( unknownCells );\n\n              // Try it!\n              saveSnapshot( clone( rows ) );\n              updateCell( ri, ci, random( cell.possibilities ) );\n              outOfOptions( false );\n            } }>Guess!</button>\n          ) : null\n        ) }\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}